// schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// generator dbml {
//   provider = "prisma-dbml-generator"
// }

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  at            String?   @unique
  emailVerified DateTime?
  image         String?
  // notifications Notification[]
  collection    Car[]
  liked         Liked[]
  followers     Int?
  following     Int?
  likes         Int?
  Account       Account[]
  Session       Session[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// model Notification {
//   id        String   @id @default(cuid())
//   to        User     @relation("to", fields: [toId], references: [id])
//   toId      String
//   user      User?    @relation("from", fields: [userId], references: [id])
//   userId    String?
//   car       Car      @relation(fields: [carId], references: [id])
//   carId     String
//   createdAt DateTime @default(now()) @map(name: "created_at")
//   User      User?    @relation(fields: [userId], references: [id])
// }

model Category {
  id   String @id @default(cuid())
  name String
  car  Car[]
}

model Car {
  id               String    @id @default(cuid())
  name             String
  brand            Brand?    @relation(fields: [brandId], references: [id])
  brandId          String?
  description      String?
  image            String?
  author           User?     @relation(fields: [authorId], references: [id])
  authorId         String?
  createdAt        DateTime  @default(now()) @map(name: "created_at")
  updatedAt        DateTime  @updatedAt @map(name: "updated_at")
  inCollection     DateTime?
  category         Category? @relation(fields: [categoryId], references: [id])
  categoryId       String?
  engineType       String?
  cylinderCapacity String?
  transmissionType String?
  axis             String?
  horsePower       String?
  torque           String?
  liked            Liked[]
}

model Brand {
  id   String @id @default(cuid())
  name String
  car  Car[]
}

model Liked {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String
  car    Car    @relation(fields: [carId], references: [id])
  carId  String
}
